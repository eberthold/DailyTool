// <auto-generated />
using System;
using DailyTool.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyTool.DataAccess.Migrations
{
    [DbContext(typeof(ScrummyContext))]
    [Migration("20230116070241_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("DailyTool.DataAccess.Meetings.DailyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SprintBoardUri")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Dailies");
                });

            modelBuilder.Entity("DailyTool.DataAccess.Meetings.MeetingParticipantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyMeetingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DailyMeetingId");

                    b.HasIndex("PersonId");

                    b.ToTable("DailyMeetingParticipants");
                });

            modelBuilder.Entity("DailyTool.DataAccess.People.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DailyTool.DataAccess.Teams.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DailyTool.DataAccess.Meetings.DailyEntity", b =>
                {
                    b.HasOne("DailyTool.DataAccess.Teams.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DailyTool.DataAccess.Meetings.MeetingParticipantEntity", b =>
                {
                    b.HasOne("DailyTool.DataAccess.Meetings.DailyEntity", "DailyMeeting")
                        .WithMany()
                        .HasForeignKey("DailyMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyTool.DataAccess.People.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMeeting");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DailyTool.DataAccess.People.PersonEntity", b =>
                {
                    b.HasOne("DailyTool.DataAccess.Teams.TeamEntity", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamEntityId");
                });

            modelBuilder.Entity("DailyTool.DataAccess.Teams.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
